name: Deploy Node.js App

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ Configure AWS credentials
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # 3️⃣ Login to ECR
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 4️⃣ Build Docker image
      - name: Build Docker image
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/nodeapp:latest"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      # 5️⃣ SSH into EC2 and deploy
 - name: Deploy on EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Install AWS CLI if not already installed
          if ! command -v aws &> /dev/null
          then
            echo "Installing AWS CLI..."
            sudo apt-get update -y
            sudo apt-get install -y awscli
          fi

          # Login to ECR
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 851725330786.dkr.ecr.ap-south-1.amazonaws.com

          # Pull the latest image
          docker pull 851725330786.dkr.ecr.ap-south-1.amazonaws.com/nodeapp:latest

          # Stop and remove old container if it exists
          docker stop nodeapp || true
          docker rm nodeapp || true

          # Run the new container
          docker run -d -p 3000:3000 --name nodeapp 851725330786.dkr.ecr.ap-south-1.amazonaws.com/nodeapp:latest          
          
          
